extends CharacterBody2D

# ============= ‚öîÔ∏è PLAYER DATA =============
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö node ‡∏¢‡πà‡∏≠‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Player scene
@onready var animated_sprite_2d: AnimatedSprite2D = $AnimatedSprite2D
@onready var deal_attack_timer: Timer = $deal_attack_timer
@onready var label_player_power: Label = $Label_player_power
@onready var death_ui = $death
@onready var anim_player = $death_animation

# ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö (‡πÉ‡∏ä‡πâ‡∏£‡∏≠ await)
signal death_anim_finised

# ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
var speed: float = 40.0
var direction: Vector2
var current_dir: String = "none"
var is_attack_ip = false  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ

# ‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
var power: int = 5              
var hp: int = power              

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ
var enemies_in_range: Array = []


# ============= üèÉ MOVEMENT =============
func _physics_process(delta: float) -> void:
	# ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Input Map
	direction.x = Input.get_axis("Move_Left", "Move_Right")
	direction.y = Input.get_axis("Move_Up", "Move_Down")
	direction = direction.normalized()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏™‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
	display_power()

	# ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ
	if not is_attack_ip:
		if direction.length() > 0:
			# ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥
			velocity = direction * speed
			update_current_dir()   # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
			play_anim(1)           # ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô
		else:
			# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏î‡πÄ‡∏î‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏´‡∏¢‡∏∏‡∏î
			velocity = velocity.move_toward(Vector2.ZERO, speed)
			play_anim(0)           # ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô idle
	else:
		# ‡∏ñ‡πâ‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
		velocity = velocity.move_toward(Vector2.ZERO, speed)

	# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó tile (‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_tile_speed)
	velocity *= get_tile_speed()

	# ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á ‡πÜ
	move_and_slide()


# ============= üé≠ ANIMATION =============
func update_current_dir() -> void:
	# ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ player ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô)
	if abs(direction.x) > abs(direction.y):
		current_dir = "right" if direction.x > 0 else "left"
	else:
		current_dir = "down" if direction.y > 0 else "up"

func play_anim(movement: int) -> void:
	var anim = animated_sprite_2d
	match current_dir:
		"right":
			anim.flip_h = false
			if movement == 1: anim.play("side_walk")
			elif movement == 0 and not is_attack_ip: anim.play("side_idle")
		"left":
			anim.flip_h = true
			if movement == 1: anim.play("side_walk")
			elif movement == 0 and not is_attack_ip: anim.play("side_idle")
		"down":
			if movement == 1: anim.play("front_walk")
			elif movement == 0 and not is_attack_ip: anim.play("front_idle")
		"up":
			if movement == 1: anim.play("back_walk")
			elif movement == 0 and not is_attack_ip: anim.play("back_idle")


# ============= üìè COLLISION DETECTION =============
# ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡πà‡∏≤ Enemy ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func _on_player_hurtbox_body_entered(body: Node2D) -> void:
	if body.has_method("enemy"):   # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ node ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ method enemy()
		enemies_in_range.append(body)

func _on_player_hurtbox_body_exited(body: Node2D) -> void:
	if body.has_method("enemy"):
		enemies_in_range.erase(body)


# ============= ‚öîÔ∏è COMBAT SYSTEM =============
func attack_enemy(target) -> void:
	# ‡∏™‡∏∏‡πà‡∏°‡∏î‡∏≤‡πÄ‡∏°‡∏à 1‚Äì6 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏π‡∏ì‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	var damage = randi_range(1, 6) * power
	target.take_damage(damage)

	# ‡∏ñ‡πâ‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö
	if target.hp > 0:
		var enemy_damage = target.power
		hp -= enemy_damage
		power = hp   # ‡πÉ‡∏´‡πâ power ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö HP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		print("Enemy deals %d damage! Player HP now %d" % [enemy_damage, hp])

		# ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏¢
		if hp <= 0:
			print("Player defeated!")
			anim_player.play("death_animation")
			await death_anim_finised
			$death.visible = true
			# queue_free()  # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏ö player ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡∏Å‡πá‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏î‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏®‡∏±‡∏ï‡∏£‡∏π (‡∏ï‡∏≠‡∏ô‡∏Ü‡πà‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π)
func absorb_power(enemy_power: int) -> void:
	power += enemy_power
	hp = power
	print("Absorbed %d power! Player new power = %d" % [enemy_power, power])
	

# ============= üéÆ INPUT HANDLER =============
func _input(event):
	# ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "attack" ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ
	if Input.is_action_just_pressed("attack") and not is_attack_ip:
		if hp > 0:
			attack()

func attack():
	is_attack_ip = true
	
	# ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
	if enemies_in_range.size() > 0:
		var target = enemies_in_range[0]
		attack_enemy(target)

	# ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà
	match current_dir:
		"right":
			animated_sprite_2d.flip_h = false
			animated_sprite_2d.play("side_ATK")
		"left":
			animated_sprite_2d.flip_h = true
			animated_sprite_2d.play("side_ATK")
		"down":
			animated_sprite_2d.play("front_ATK")
		"up":
			animated_sprite_2d.play("back_ATK")

	# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ (‡∏Å‡∏±‡∏ô spam)
	deal_attack_timer.start()

func _on_deal_attack_timer_timeout() -> void:
	deal_attack_timer.stop()
	is_attack_ip = false  # ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á


# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ power ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô Label
func display_power():
	label_player_power.text = "" + str(power)


# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
func _on_death_animation_animation_finished(anim_name: StringName) -> void:
	if anim_name == "death_animation":
		death_anim_finised.emit()


# ============= üåç TILE-BASED SPEED SYSTEM =============
# ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏≤‡∏Å tile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏∑‡∏ô‡∏≠‡∏¢‡∏π‡πà
func get_tile_speed() -> float:
	var tilemap: TileMapLayer = get_tree().get_first_node_in_group("tilemap")
	
	if not tilemap: 
		return 1.0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ TileMapLayer ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	
	var cell: Vector2i = tilemap.local_to_map(position)
	var data: TileData = tilemap.get_cell_tile_data(cell)
	
	if data:
		var tile_speed: float = data.get_custom_data("tile_speed")
		if tile_speed > 0:
			return tile_speed  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏≤‡∏Å custom data
	
	return 1.0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• custom data ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
